[{"path":"https://mikuo0628.github.io/phrdwRdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 BCCDC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/articles/FAQ.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Frequently Asked Questions","text":"vignette documents solutions common issues using package. Users encouraged submit issues GitHub addressed . effective way hail developers’ attention, promote discussion, track log issues. Additionally, solution developed, users encouraged submit pull request, adding list solutions. avoid haphazard stream issue submissions, users keep following mind: anything change, , ? , sure? Really sure? work ? still access? error message? Can reproduce error? Can others reproduce error? read reprex? provided sessionInfo()? question someone else came , anything ask ? asked, might well provide preemptively. end day, MVP qualified help us help .","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/articles/FAQ.html","id":"get_phrdw_data-making-it-work","dir":"Articles","previous_headings":"","what":"get_phrdw_data(): making it work","title":"Frequently Asked Questions","text":"Due legacy nature integration deprecated closed-source packages, users may need perform troubleshooting, especially accessing data cubes/OLAP data sources. Missing provider/driver. Error code: 800a0e7a. Full description: Provider found. may properly     installed Solution: Install latest MSOLAP client libraries . Make sure architecture aligns R version. (amd64 64-bit; x86 32-bit).","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/articles/Legacy.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Legacy Usage of `get_phrdw_data()`","text":"phrdwRdata::get_phrdw_data() function designed pull data users easy efficient manner abstracting away nuances database connection, complexity querying OLAP (ie. data cubes) relational database (ie. SQL), easy handling common filters, Health Authority Regions, etc. redesign phrdwRdata package removes restriction work Microsoft Client R (ver 3.5.2), respects legacy scripts retaining order arguments, updating functions deprecated R version 4+. assurance users need refactor scripts, old scripts continue work. said, highly recommended users update upgrade workflow meet modern coding standards. vignette collects revises (necessary) past phrdwRdata tutorials presents one place.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/articles/Legacy.html","id":"prerequisites-for-legacy-phrdwrdata-package","dir":"Articles","previous_headings":"","what":"Prerequisites for legacy phrdwRdata package","title":"Legacy Usage of `get_phrdw_data()`","text":"BCCDC Analytics Platform (Citrix) running required Microsoft R Client (ver 3.5.2) comes olapR package OLE DB connection files drive OLAP (data cube) operations. action needed using Citrix. Users using Citrix want R installed locally need ensure following met. Local PC running 64-bit Windows. Microsoft R Client 3.5.2. Alternatively, CRAN R client 3.5.2, require side- loading (ie. loading packages install) olapR package can potentially problematic.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/articles/Legacy.html","id":"cd-mart","dir":"Articles","previous_headings":"","what":"CD Mart","title":"Legacy Usage of `get_phrdw_data()`","text":"’s table CD Mart datasets, keys used joining, brief description available.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/articles/Legacy.html","id":"non-tuberculosis-datasets","dir":"Articles","previous_headings":"CD Mart","what":"Non Tuberculosis Datasets","title":"Legacy Usage of `get_phrdw_data()`","text":"Investigation dataset retrieve non-identifiable client attributes age gender, along Panorama data region, date, etiologic agent stage. also support retrieve linked datasets Risk Factors, Signs, Symptoms, UDFs. time, Classification Group == Case can pulled CD Mart datasets (mean? true??? don’t see code CD). Note: completed data returned linked datasets. see investigations Risk Factors, Signs & Symptoms User Defined forms completed, LEFT JOIN back Investigation dataset required.","code":""},{"path":[]},{"path":"https://mikuo0628.github.io/phrdwRdata/articles/Legacy.html","id":"script-set-up","dir":"Articles","previous_headings":"CD Mart","what":"Script set up","title":"Legacy Usage of `get_phrdw_data()`","text":"need load side-load following: Create connection object Set start end dates query Additional optional parameters disease classification surveillance_condition surveillance_region_ha Supply parameters get_phrdw_data()","code":"# Dependencies for `phrdwRdata` library(dplyr) library(digest)   library(stringr) library(RODBC) library(RODBCext)  lib_loc <- \"//Phsabc/root/BCCDC/Groups/Analytics_Resources/Coding/R/Library\" library(olapR,      lib.loc = log_loc) # if not using MS R Client library(phrdwRdata, lib.loc = log_loc) phrdw_datamart <- 'CD Mart' phrdw_datamart_connection <- phrdwRdata::connect_to_phrdw(phrdw_datamart) query_start_date <- as.Date('2016-01-01') query_end_date   <- as.Date('2018-01-01') surveillance_condition <- c(\"Legionella Infection\") classification         <- c(\"Confirmed\",                             \"Confirmed Epi-Linked\",                             \"Clinical\",                             \"Probable\") surveillance_region_ha <- c(\"Interior\",                             \"Fraser\",                             \"Northern\",                             \"Vancouver Coastal\",                             \"Vancouver Island\") dataset_name <- \"Investigation\" investigation_dataset  <-    get_phrdw_data(     phrdw_datamart_connection = phrdw_datamart_connection,     phrdw_datamart            = phrdw_datamart,      dataset_name              = dataset_name,      query_start_date          = query_start_date,      query_end_date            = query_end_date,     surveillance_condition    = surveillance_condition_vector,     classification            = classification_vector,     surveillance_region_ha    = surveillance_region_ha_vector   )  dataset_name <- \"UDF\" udf_dataset  <-    get_phrdw_data(     phrdw_datamart_connection = phrdw_datamart_connection,     phrdw_datamart            = phrdw_datamart,      dataset_name              = dataset_name,      query_start_date          = query_start_date,      query_end_date            = query_end_date,     surveillance_condition    = surveillance_condition_vector,     classification            = classification_vector,     surveillance_region_ha    = surveillance_region_ha_vector   )"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://mikuo0628.github.io/phrdwRdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Data & Informatics. Maintainer. Darren Frizzell. Author.           Original Author BCCDC. Copyright holder, funder.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frizzell D (2025). phrdwRdata: Retrieve pre-built PHSA Datasets. R package version 1.0.0, https://mikuo0628.github.io/phrdwRdata/.","code":"@Manual{,   title = {phrdwRdata: Retrieve pre-built PHSA Datasets},   author = {Darren Frizzell},   year = {2025},   note = {R package version 1.0.0},   url = {https://mikuo0628.github.io/phrdwRdata/}, }"},{"path":"https://mikuo0628.github.io/phrdwRdata/index.html","id":"phrdwrdata","dir":"","previous_headings":"","what":"Retrieve pre-built PHSA Datasets","title":"Retrieve pre-built PHSA Datasets","text":"phrdwRdata package designed specifically BCCDC users easily query pull pre-built datasets abstracting away server connections, handling data sources, writing specific MDX SQL queries, joining different fact tables, etc. Users can consistently pull data without -depth domain knowledge pertaining specific data sources flows, need explore backend tables first follow testing validations. Users just need provide parameters, wish, query dates, disease name, health regions, various built-filters specific dataset, able proceed analyses pipeline.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Retrieve pre-built PHSA Datasets","text":"Windows operating system (required accessing data cubes) PHSA network: PHSABC.EHCNET.CA can checked Sys.getenv('USERDNSDOMAIN'). Access approval Users need submit access approved mart-designated data stewards. R, version 4+ Windows, see . Necessary ODBC drivers match installed R’s architecture (32- 64-bit) Check Drivers tab running one following: 32-bit: %windir%\\syswow64\\odbcad32.exe 64-bit: %windir%\\system32\\odbcad32.exe","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Retrieve pre-built PHSA Datasets","text":"best way install via Github. ensures --date functionality bug fixes. install Github, may require additional packages, devtools renv. Installation Gitlab available soon. Alternatively, can install pre-compiled tarball found network drive. Although may guarantee newest version. Users take note version number file name.","code":"# with devtools install.packages('devtools') devtools::install_github(   'mikuo0628/phrdwRdata',   # if installation runs into issue with test load   # INSTALL_opts = '--no-test-load',   # to upgrade dependencies: use if dependencies out of date   # upgrade = 'ask',   dependencies = T,   force = T )  # with renv install.packages('renv') renv::install(   'mikuo0628/phrdwRdata',   rebuild = T,   dependencies = T,   prompt = F ) install.packages(   file.path(     \"O:/BCCDC/Groups/Analytics_Resources/Coding\",     \"Git_Repository/phrdwRdata_1.0.0.tar.gz\" # version number may be different   ),   # if installation runs into issue with test load   # INSTALL_opts = '--no-test-load',    repos = NULL )"},{"path":"https://mikuo0628.github.io/phrdwRdata/index.html","id":"usages","dir":"","previous_headings":"","what":"Usages","title":"Retrieve pre-built PHSA Datasets","text":"legacy functionality retained. Please read vignette('Legacy').","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/index.html","id":"whats-new","dir":"","previous_headings":"Usages","what":"What’s new?","title":"Retrieve pre-built PHSA Datasets","text":"phrdwRdata can now used outside Microsoft R client (ver 3.5.2), newer R versions, previously required deprecated (thus longer found) packages longer needed (olapR, RODBCext, etc). Installation package available preferred, opposed “side-loading” pre-compiled version stored network drive, can lead unexpected issues (package compiled specific architecture). Datasets retrieved SQL now leverages dbplyr. Datasets retrieved SQL pre-optimized performing joining tables first JOIN. improves performance initial call (ie. internal caching). also experimental common table expression (CTE) parameter attempt execute SQL queries CTEs using instead subqueries. Using function now streamlined less repetition. need establish connection first. need repeat phrdw_datamart. forgiving user inputs. case-sensitive. Dates can character strings, handles open bounds gracefully. Troubleshooting messages tools. Meaningful error messages users troubleshoot. Return query instead data. Examine dataset metadata. Beyond default built-filters: users can leverage metadata info dynamic dots query additional filters. See Examples phrdwRdata::get_phrdw_data().","code":"# Legacy system.time(  phrdwRdata::get_phrdw_data(    phrdw_datamart_connection = connect_to_phrdw('CD Mart'),    phrdw_datamart            = 'CD Mart',    dataset_name              = 'Investigation',    query_start_date          = '2021-01-01',    query_end_date            = '2022-01-01'  ) )  # Stable system.time(  phrdwRdata::get_phrdw_data(    mart             = 'CD',    dataset_name     = 'Investigation',    query_start_date = '2021-01-01',    query_end_date   = '2022-01-01'  ) ) # Legacy    user  system elapsed     1.35    0.67   22.58      # Stable    user  system elapsed     1.84    0.56   10.86 # Legacy phrdwRdata::get_phrdw_data(   phrdw_datamart_connection = connect_to_phrdw('CD Mart'),   phrdw_datamart            = 'CD Mart',   dataset_name              = 'Investigation',   query_start_date          = '2021-01-01',   query_end_date            = '2022-01-01' )  # Stable phrdwRdata::get_phrdw_data(   mart             = 'CD',   dataset_name     = 'Investigation',   query_start_date = '2021-01-01',   query_end_date   = '2022-01-01' ) phrdwRdata::get_phrdw_data(   mart             = 'cd',    dataset_name     = 'investigation',   query_start_date = '2021-01-01',   query_end_date   = '2022-01-01' ) phrdwRdata::get_phrdw_data(   mart             = 'xyz',    dataset_name     = 'investigation',   query_start_date = '2021-01-01',   query_end_date   = '2022-01-01' ) Error: Please check argument `mart` spelling. It should be one of the following (non case-sensitive):    - CD   - CDI   - Enteric   - Respiratory   - STIBBI   - TAT   - VPD phrdwRdata::get_phrdw_data(   mart             = 'cd',    dataset_name     = 'investigations',   query_start_date = '2021-01-01',   query_end_date   = '2022-01-01' ) Error: Please check `dataset_name` spelling. It should be one of the following (case-sensitive if legacy):    - Investigation   - Client   - Risk Factor   - Symptom   - Observation   - UDF   - Lab   - Transmission Events   - Contacts   - Outbreaks   - Complication   - TB Contacts   - TB Investigation   - TB Transmission Events   - TB Client   - TB TST Investigation   - TB TST Client   - TB Lab"},{"path":"https://mikuo0628.github.io/phrdwRdata/index.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"Retrieve pre-built PHSA Datasets","text":"Please see vignette('FAQ').","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/connect_to_phrdw.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a connection object for PHRDW data marts. — connect_to_phrdw","title":"Creates a connection object for PHRDW data marts. — connect_to_phrdw","text":"Connect PHRDW data marts. Depending mart, appropriate driver connection parameters selected automatically. detailed list data marts respective servers, please see phrdwRdata:::servers.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/connect_to_phrdw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a connection object for PHRDW data marts. — connect_to_phrdw","text":"","code":"connect_to_phrdw(   phrdw_datamart = NULL,   mart = NULL,   type = c(\"prod\", \"su\", \"sa\")[1],   .conn_str = NULL,   .return_conn_str = F )"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/connect_to_phrdw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a connection object for PHRDW data marts. — connect_to_phrdw","text":"phrdw_datamart  Legacy mart designations provided previous package authors. backward-compatibility meant minimize changes user end. stable approach reference mart type. mart  Provide appropriate mart name (non-case specific). Must one \"CDI\", \"CD\", \"Respiratory\", \"Enteric\", \"STIBBI\", \"VPD\". Non case-sensitive. type  Provide appropriate mart type (non-case specific). Must one \"prod\" (default), \"su\", \"sa\". Non case-sensitive. See Details. .conn_str Defaults NULL. advance usage testing purposes: clear exact connection parameters, can enter named list, name element cube sql, determine appropriate connection driver, element character string containing specific parameters. See Details. .return_conn_str TRUE, return character vector instead connection objects. troubleshooting purposes. Defaults FALSE.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/connect_to_phrdw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a connection object for PHRDW data marts. — connect_to_phrdw","text":"default, odbc OLAP_Conn connection object can executed appropriate queries retrieve views. .return_conn_str TRUE, return character vector connection parameters.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/connect_to_phrdw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a connection object for PHRDW data marts. — connect_to_phrdw","text":"List values supply phrdw_datamart. Case sensitive. CDI: Chronic Disease & Injury; links data Vital Statistics death records census-based socio-economic data. CD Mart: Communicable Diseases; contains communicable disease public health investigation data Panorama public health system. Enteric: Enteric; links data Panorama public health system Sunquest laboratory information system PHSA. Respiratory: Respiratory diseases; includes data Sunquest laboratory information system PHSA. STIBBI: Sexually Transmitted Blood Borne Infections; links data Panorama public health system, Sunquest laboratory information system PHSA, STIIS, HAISYS, legacy laboratory systems. VPD: Vaccine Preventable Disease; links data Panorama public health system Sunquest laboratory information system PHSA. TAT: TBD. Enteric SU: UAT server Enteric. STIBBI SU: UAT server STIBBI. STIBBI SA: PROD copy/Staging server STIBBI. VPD SU: UAT server VPD. Using mart type preferred. case-sensitive readable. now, PHRDW data architecture either data warehouse/relational table  data cubes, depending mart. Connection data warehouse returns odbc::dbConnect() connection object, whereas connection data cube returns OLAP_Conn object, just character string hood executed back-end C routine. means connection data warehouse allows memory-efficient tools like dbplyr data read lazily rather loaded memory. Users can supply connection string using .conn_str. distinguish different architectures, parameter needs named list, either sql cube. See Examples.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/connect_to_phrdw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a connection object for PHRDW data marts. — connect_to_phrdw","text":"","code":"if (FALSE) { # \\dontrun{  library(phrdwRdata)  # Legacy ------------------------------------------------------------------ phrdw_datamart <- 'CD Mart' phrdw_datamart_connection <- connect_to_phrdw(phrdw_datamart)   phrdw_datamart <- 'STIBBI' phrdw_datamart_connection <- connect_to_phrdw(phrdw_datamart)  # Stable ------------------------------------------------------------------  connect_to_phrdw(mart = 'stibbi') connect_to_phrdw(mart = 'stibbi', type = 'su') connect_to_phrdw(mart = 'stibbi', type = 'su', .return_conn_str = T)  # Connect to STIBBI cube with connection string conn_str_cube <-   list(     cube =       paste(         \"Data Source=SPRSASBI001.phsabc.ehcnet.ca\\\\PRISASBIM\",         \"Initial catalog=PHRDW_STIBBI\",         \"Provider=MSOLAP\",         \"Packet Size=32767\",         sep = ';'       )   ) connect_to_phrdw(.conn_str = conn_str_cube)  # Connect to CD mart with connection string connect_to_phrdw(   .conn_str =     list(       sql =         paste(           \"driver={SQL Server}\",           \"server=SPRDBSBI003.phsabc.ehcnet.ca\\\\PRIDBSBIEDW\",           \"database=SPEDW\",           sep = ';'         )     ) )  } # }"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/explore.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to explore cube names, dimensions, hierarchies, and levels of cube connection. — explore","title":"Wrapper to explore cube names, dimensions, hierarchies, and levels of cube connection. — explore","text":"Given olapCnn OLAP connection string, returns info cubes OLAP server. cube information supplied, return information highest level.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/explore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to explore cube names, dimensions, hierarchies, and levels of cube connection. — explore","text":"","code":"explore(olapCnn, cube = NULL, dimension = NULL, hierarchy = NULL, level = NULL)"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/explore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to explore cube names, dimensions, hierarchies, and levels of cube connection. — explore","text":"olapCnn Required. OLAP connection string. Can created connect_to_phrdw(). cube Optional. Cube name. dimension Optional. Dimension name. hierarchy Optional. Hierarchy name. level Optional. Level name.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/explore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to explore cube names, dimensions, hierarchies, and levels of cube connection. — explore","text":"Character vector cube(s) information.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/get_phrdw_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve pre-built datasets from specific datamarts. — get_phrdw_data","title":"Retrieve pre-built datasets from specific datamarts. — get_phrdw_data","text":"Helps users retrieve pre-built datasets specific datamarts, capacity supply values default filters, dates diseases. addition retrieving data, user can perform preliminary self-diagnostics troubleshoot issues, return query instead data, even supply filters outside predefined default filters. function retains legacy form, can invoked providing arguments phrdw_ prefix, phrdw_datamart_connection phrdw_datamart. modern form, hand, invoked simple mart /type, streamlines process, allows additional features, avoids redundant inputs phrdw_datamart connect_to_phrdw() get_phrdw_data().","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/get_phrdw_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve pre-built datasets from specific datamarts. — get_phrdw_data","text":"","code":"get_phrdw_data(   phrdw_datamart_connection = NULL,   phrdw_datamart = NULL,   dataset_name = NULL,   query_start_date = NULL,   query_end_date = NULL,   include_patient_identifiers = F,   include_indigenous_identifiers = F,   retrieve_system_ids = \"Yes\",   disease = NULL,   surveillance_condition = NULL,   classification = NULL,   surveillance_region_ha = NULL,   infection_group = NULL,   ordering_provider_ha = NULL,   lis_status = NULL,   episode_status = NULL,   test_type = NULL,   episode_testing_pattern = NULL,   testing_region_ha = NULL,   case_status = NULL,   case_source = NULL,   ucd_3_char_code = NULL,   ccd_3_char_code = NULL,   residential_location_ha = NULL,   death_location_ha = NULL,   mart = NULL,   type = c(\"prod\", \"su\", \"sa\")[1],   .head = NULL,   .check_params = F,   .return_query = F,   .return_data = !(.return_query || isTRUE(.check_params) || is.character(.check_params)),   .clean_data = F,   .query_df = NULL,   .query_str = NULL,   .cte = F,   ... )"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/get_phrdw_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve pre-built datasets from specific datamarts. — get_phrdw_data","text":"phrdw_datamart_connection  Legacy function design: supply connection object created connect_to_phrdw(). Recommend using mart type instead flexibility (see connect_to_phrdw()). function takes care connecting appropriate PHRDW database disconnect performing requested data filtering retrieving. phrdw_datamart  Legacy mart designations provided previous package authors. backward-compatibility meant minimize changes user end. stable approach reference mart type. dataset_name name pre-built dataset retrieve. query_start_date Start date dataset. Can accept character date. Defaults NULL, indicates lower bound. query_end_date End date dataset. Can accept character date. Defaults NULL, indicates upper bound. include_patient_identifiers Whether include patient identifier information. Accepts Boolean values. Defaults FALSE. Note: user needs access, otherwise data restriction may return unintended results. include_indigenous_identifiers Whether include indigenous identifier information. Accepts Boolean values. Defaults FALSE. Note: user needs access, otherwise data restriction may return unintended results. retrieve_system_ids Whether include systems IDs dataset. Currently applies Enteric datamart. Defaults legacy value \"Yes\", can accept Boolean, longer case-specific. disease Optional. Character vector diseases. applicable datasets. surveillance_condition Optional. Character vector surveillance conditions. applicable datasets. classification Optional. Character vector classifications. applicable datasets. surveillance_region_ha Optional. Character vector Health Region Authorities Patient lives/lived. applicable datasets. infection_group Optional. Character vector infection groups. applicable datasets. ordering_provider_ha Optional. Character vector Health Region Authorities Ordering Provide resides. applicable datasets. lis_status Optional. Character vector case level statuses LIS data Case. applicable datasets. episode_status Optional. Character vector episode statuses LIS result processing rule engine. applicable datasets. test_type Optional. Character vector types tests. applicable datasets. episode_testing_pattern Optional. Character vector testing patterns. applicable datasets. testing_region_ha Optional. Character vector testing Health Region Authorities. applicable datasets. case_status Optional. Character vector case status. applicable datasets. case_source Optional. Character vector case status. applicable datasets. ucd_3_char_code Optional. Character vector UCD 3-character codes. applicable CDI datasets. ccd_3_char_code Optional. Character vector CCD 3-character codes. applicable CDI datasets. residential_location_ha Optional. Character vector BC Health Authorities associated decedant's usual residence. applicable CDI datasets. death_location_ha Optional. Character vector BC Health Authorities associated decedant's location death. applicable CDI datasets. mart  Provide appropriate mart name (non-case specific). Must one \"CDI\", \"CD\", \"Respiratory\", \"Enteric\", \"STIBBI\", \"VPD\". Non case-sensitive. type  Provide appropriate mart type (non-case specific). Must one \"prod\" (default), \"su\", \"sa\". Non case-sensitive. See Details. .head  Optional. Single integer vector indicate many rows top return. Note: tail supported database backends. .check_params  Can accept Boolean character values. Boolean TRUE return general info dataset: MDX queries: dimensions, hierarchies, levels possible, hierarchies default filters. SQL queries: column names source tables, renamed , columns default filters. hand, user can supply hierarchy column names retrieved character vector, list cardinal levels return. Useful check typos, available names filter . .return_query Boolean value. Whether return query . .return_data Boolean value. Whether return data . .clean_data Boolean value. Whether attempt cleaning dates data . .query_df  Accepts named list single element, names can either sql olap, element data.frame object similar structure phrdwRdata:::list_query_info$olap. User responsible syntax validity compatibility (ie. OLAP SQL, appropriate access, etc) query. .query_str  Accepts named list single element, names can either sql olap, element character vector query. User responsible syntax validity compatibility (ie. OLAP SQL, appropriate access, etc) query. .cte  Experimental support common table expressions (CTEs). Defaults FALSE. equivalent pipe, essence allows writing subqueries order evaluated. Supported dplyr::show_query(), dplyr::compute(), dplyr::collect(). one ways optimize SQL execution: using CTEs instead subqueries. ... User can supply named vector: names column hierarchy name, elements vector value filter . See Details.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/get_phrdw_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve pre-built datasets from specific datamarts. — get_phrdw_data","text":"Depending user input, data.frame tibble character string.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/get_phrdw_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve pre-built datasets from specific datamarts. — get_phrdw_data","text":"List values supply phrdw_datamart. Case sensitive. CDI: Chronic Disease & Injury; links data Vital Statistics death records census-based socio-economic data. CD Mart: Communicable Diseases; contains communicable disease public health investigation data Panorama public health system. Enteric: Enteric; links data Panorama public health system Sunquest laboratory information system PHSA. Respiratory: Respiratory diseases; includes data Sunquest laboratory information system PHSA. STIBBI: Sexually Transmitted Blood Borne Infections; links data Panorama public health system, Sunquest laboratory information system PHSA, STIIS, HAISYS, legacy laboratory systems. VPD: Vaccine Preventable Disease; links data Panorama public health system Sunquest laboratory information system PHSA. TAT: TBD. Enteric SU: UAT server Enteric. STIBBI SU: UAT server STIBBI. STIBBI SA: PROD copy/Staging server STIBBI. VPD SU: UAT server VPD. Using mart type preferred. case-sensitive readable. now, PHRDW data architecture either data warehouse/relational table  data cubes, depending mart. Connection data warehouse returns odbc::dbConnect() connection object, whereas connection data cube returns OLAP_Conn object, just character string hood executed back-end C routine. means connection data warehouse allows memory-efficient tools like dbplyr data read lazily rather loaded memory. Users can supply connection string using .conn_str. distinguish different architectures, parameter needs named list, either sql cube. See Examples.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/get_phrdw_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve pre-built datasets from specific datamarts. — get_phrdw_data","text":"","code":"if (FALSE) { # \\dontrun{  # The bare minimum required user inputs are `mart` and `dataset_name`. # User input is simpler and not case-sensitive. get_phrdw_data(   mart = 'cd',   dataset_name = 'investigation' )  # Unlike the legacy approach, which would require more user input. # User need to be wary of spelling and case. # User also need to provide dates, even if the intent is to retrieve # the entire dataset. Without date boundaries, unexpected output may return. # Dates would need to go beyond what exist in the database, but user would not # have known this info. get_phrdw_data(   phrdw_datamart_connection = connect_to_phrdw(phrdw_datamart = 'CD Mart'),   phrdw_datamart = 'CD Mart',   dataset_name = 'Investigation',   query_start_date = '1900-01-01',   query_end_date   = Sys.Date() )  # Incorrect spelling will generate helpful message to assist user. get_phrdw_data(   mart = 'dc',   dataset_name = 'investigation' )  get_phrdw_data(   mart = 'stibbi',   dataset_name = 'investigations' )  # Filter ## Some arguments are reserved for filters. These remain unchanged from before. ## They are case- and spelling-sensitive. get_phrdw_data(   mart = 'cd',   dataset_name = 'investigation',   disease = 'Anthrax' )  get_phrdw_data(   phrdw_datamart_connection = connect_to_phrdw(phrdw_datamart = 'CD Mart'),   phrdw_datamart = 'CD Mart',   dataset_name = 'Investigation',   query_start_date = '1900-01-01',   query_end_date   = Sys.Date(),   disease = 'Anthrax' )  get_phrdw_data(   mart = 'stibbi',   dataset_name = 'investigation',   disease = 'Chlamydia' )  get_phrdw_data(   phrdw_datamart_connection = connect_to_phrdw(phrdw_datamart = 'STIBBI'),   phrdw_datamart = 'STIBBI',   dataset_name = 'Investigation',   query_start_date = '1900-01-01',   query_end_date   = Sys.Date(),   disease = 'Chlamydia' )  # Troubleshooting ## User can opt to return query instead of data. get_phrdw_data(   mart = 'cd',   dataset_name = 'investigation',   .return_query = T )  # User can use `.check_params` to examine basic dataset metainfo such as # column names and what's being used to filter by default. # Note: the output format may look different depending on data source being # RDBMS or OLAP (ie. relational DB or data cube). get_phrdw_data(   mart = 'cd',   dataset_name = 'investigation',   .check_params = T )  get_phrdw_data(   mart = 'stibbi',   dataset_name = 'investigation',   .check_params = T )  # When `.check_params` is supplied with the name of the column (or # hierarchy), it will return (nominal) levels. # Use with caution: it can return dates and street addresses and that would be # a long list. get_phrdw_data(   mart = 'cd',   dataset_name = 'investigation',   .check_params = 'source_system' )  get_phrdw_data(   mart = 'stibbi',   dataset_name = 'investigation',   .check_params = 'Source System' )  # Customize filtering (only available in stable usage) ## Knowing columns and levels can be helpful, as these values can be passed ## into the function for customized filtering: ## 1. Enclose the column name with backticks. ## 2. Pass the value to filter. get_phrdw_data(   mart = 'cd',   dataset_name = 'investigation',   `source_system` = 'EMR' )  get_phrdw_data(   mart = 'stibbi',   dataset_name = 'investigation',   `Source System` = 'EMR' )  } # }"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/map_sql_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve full mapping of views and columns using sys.schema. — map_sql_view","title":"Retrieve full mapping of views and columns using sys.schema. — map_sql_view","text":"Retrieve full mapping views columns using sys.schema.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/map_sql_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve full mapping of views and columns using sys.schema. — map_sql_view","text":"","code":"map_sql_view(   conn = NULL,   catalog = NULL,   schema = NULL,   tbl_vw_dependencies = F )"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/map_sql_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve full mapping of views and columns using sys.schema. — map_sql_view","text":"conn odbc connection object. Defaults NULL. NULL, connect CD mart. catalog Catalog name known. Default NULL. tbl_vw_dependencies","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/map_sql_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve full mapping of views and columns using sys.schema. — map_sql_view","text":"named list: map data.frame SQL schema, view, columns; dep data.frame dependencies.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_build.html","id":null,"dir":"Reference","previous_headings":"","what":"MDX builder: takes all MDX functions and build query. — mdx_build","title":"MDX builder: takes all MDX functions and build query. — mdx_build","text":"MDX builder: takes MDX functions build query.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MDX builder: takes all MDX functions and build query. — mdx_build","text":"","code":"mdx_build(   cube_name,   columns,   rows,   dim_props,   .head,   discrete = NULL,   range = NULL )"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MDX builder: takes all MDX functions and build query. — mdx_build","text":"cube_name Cube name. columns Character vector measures, name dimension name list. Name defaults Measures. rows Accepts data.frame columns dim, attr_hier, lvl_memb, character list hierarchies, name dimension name list. dim_props Must data.frame columns dim, attr_hier, lvl_memb. .head  Optional. Single integer vector indicate many rows top return. Note: tail supported database backends. discrete data.frame object 3 columns: dim, attr, memb, \"dimension\", \"attribute\", \"member\". attribute must belong dimension, member must belong attribute hierarchy. member filter row data.frame. range data.frame object 3 columns: dim, attr, memb, \"dimension\", \"attribute\", \"member\". attribute must belong dimension, member must belong attribute hierarchy. Two rows must provided two different member values . bounds, use NULL \"null\".","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MDX builder: takes all MDX functions and build query. — mdx_build","text":"sql/character object.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MDX builder: takes all MDX functions and build query. — mdx_build","text":"","code":"if (FALSE) { # \\dontrun{ mdx_build(   cube_name = 'StibbiDM',   columns = 'Case Count',   rows =     set_names(       list(         c(           \"Age Group 10\",           \"Age Group 24\",           \"Age Years\"         )       ),       'Case - Age at Earliest Date'     ),   discrete =     tibble(       dim = 'LIS - Test',       attr = 'Test Code',       memb = c('TPE1', 'RPR')     ),   range =     tibble(       dim = 'LIS - Date - Collection',       attr = 'Date',       memb = c('2019-01-01', '2019-02-02')     ) ) } # }"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"MDX Builder: process filters, discrete or range, by date or other data types. — mdx_filter","title":"MDX Builder: process filters, discrete or range, by date or other data types. — mdx_filter","text":"MDX Builder: process filters, discrete range, date data types.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MDX Builder: process filters, discrete or range, by date or other data types. — mdx_filter","text":"","code":"mdx_filter(discrete = NULL, range = NULL, ..., .as_lines = T)"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MDX Builder: process filters, discrete or range, by date or other data types. — mdx_filter","text":"discrete data.frame object 3 columns: dim, attr, memb, \"dimension\", \"attribute\", \"member\". attribute must belong dimension, member must belong attribute hierarchy. member filter row data.frame. range data.frame object 3 columns: dim, attr, memb, \"dimension\", \"attribute\", \"member\". attribute must belong dimension, member must belong attribute hierarchy. Two rows must provided two different member values . bounds, use NULL \"null\". ... Reserved future development. .as_lines Boolean value TRUE (default), returns character vector properly spaced MDX filter clauses. needed input mdx_from formatting purposes. FALSE, returns single element character vector, printing purposes.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MDX Builder: process filters, discrete or range, by date or other data types. — mdx_filter","text":"Character vector.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MDX Builder: process filters, discrete or range, by date or other data types. — mdx_filter","text":"","code":"if (FALSE) { # \\dontrun{ mdx_filter(   discrete =     tibble(       dim = 'LIS - Test',       attr = 'Test Code',       memb = c('TPE1', 'RPR')     ),   range =     tibble(       dim = 'LIS - Date - Collection',       attr = 'Date',       memb = c('2019-01-01', '2019-02-02')     ),   .as_lines = T ) } # }"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_from.html","id":null,"dir":"Reference","previous_headings":"","what":"MDX Builder: builds the FROM clause, and incorporate any filters if needed. — mdx_from","title":"MDX Builder: builds the FROM clause, and incorporate any filters if needed. — mdx_from","text":"MDX Builder: builds clause, incorporate filters needed.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_from.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MDX Builder: builds the FROM clause, and incorporate any filters if needed. — mdx_from","text":"","code":"mdx_from(cube_name, ...)"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_from.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MDX Builder: builds the FROM clause, and incorporate any filters if needed. — mdx_from","text":"cube_name Cube name. ... Character vector lines, makes filter query build mdx_filters.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_from.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MDX Builder: builds the FROM clause, and incorporate any filters if needed. — mdx_from","text":"sql/character object.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_from.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MDX Builder: builds the FROM clause, and incorporate any filters if needed. — mdx_from","text":"","code":"if (FALSE) { # \\dontrun{ mdx_from(   'StibbiDM',   mdx_filter(     discrete =       tibble(         dim = 'LIS - Test',         attr = 'Test Code',         memb = c('TPE1', 'RPR')       ),     range =       tibble(         dim = 'LIS - Date - Collection',         attr = 'Date',         memb = c('2019-01-01', '2019-02-02')       ),     .as_lines = T   ) ) } # }"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_select.html","id":null,"dir":"Reference","previous_headings":"","what":"MDX Builder: builds the SELECT statement on columns and rows. — mdx_select","title":"MDX Builder: builds the SELECT statement on columns and rows. — mdx_select","text":"MDX Builder: builds SELECT statement columns rows.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MDX Builder: builds the SELECT statement on columns and rows. — mdx_select","text":"","code":"mdx_select(columns, rows, dim_props, .head = NULL)"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MDX Builder: builds the SELECT statement on columns and rows. — mdx_select","text":"columns Character vector measures, name dimension name list. Name defaults Measures. rows Accepts data.frame columns dim, attr_hier, lvl_memb, character list hierarchies, name dimension name list. dim_props Must data.frame columns dim, attr_hier, lvl_memb. .head  Optional. Single integer vector indicate many rows top return. Note: tail supported database backends.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MDX Builder: builds the SELECT statement on columns and rows. — mdx_select","text":"sql/character object.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/mdx_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MDX Builder: builds the SELECT statement on columns and rows. — mdx_select","text":"","code":"if (FALSE) { # \\dontrun{ mdx_select(   'Case Count',   set_names(     list(       c(         \"Age Group\",         \"Age Group 04\",         \"Age Group 05\",         \"Age Group 09\",         \"Age Group 10\",         \"Age Group 11\",         \"Age Group 17\",         \"Age Group 20\",         \"Age Group 24\",         \"Age Years\"       )     ),     'Case - Age at Earliest Date'   ) ) } # }"},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/phrdwRdata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"phrdwRdata: Retrieve pre-built PHSA Datasets — phrdwRdata-package","title":"phrdwRdata: Retrieve pre-built PHSA Datasets — phrdwRdata-package","text":"Efficient interface retrieving pre-built datasets. ease--use wrapper allows robust user defined filtering abstracting away backend database connections, queries, complex joins, dataset specific conditions.","code":""},{"path":[]},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/phrdwRdata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"phrdwRdata: Retrieve pre-built PHSA Datasets — phrdwRdata-package","text":"Maintainer:  Data & Informatics das_di@bccdc.ca Authors: Darren Frizzell (Original Author) contributors: BCCDC [copyright holder, funder]","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://mikuo0628.github.io/phrdwRdata/news/index.html","id":"phrdwrdata-100","dir":"Changelog","previous_headings":"","what":"phrdwRdata 1.0.0","title":"phrdwRdata 1.0.0","text":"Integrated olapR. Removed deprecated packages like RODBCext. Instead one (two) scripts per datamart, one function per dataset, query information tabulated parsed single function (one RDB OLAP). makes control information much easier manage. can leveraged helpful error messages. Improved call time SQL calls dbplyr optimization. Included troubleshooting tools. Updated documentations. Deployed Github IO page.","code":""},{"path":"https://mikuo0628.github.io/phrdwRdata/news/index.html","id":"future-state-1-0-0","dir":"Changelog","previous_headings":"","what":"Future state","title":"phrdwRdata 1.0.0","text":"Finish unit testing. Clean Legacy vignette. Prepare phasing PHRDW nomenclature. SSRS interface httr2 keyring. Centralize place functions? Hex logo?","code":""}]
