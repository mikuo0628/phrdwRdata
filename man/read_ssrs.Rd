% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_ssrs.R
\name{read_ssrs}
\alias{read_ssrs}
\title{Retrieves data from SSRS URLs.}
\usage{
read_ssrs(
  url = "",
  ...,
  username,
  format = c("CSV")[1],
  .explore = F,
  .skip = 0,
  .in_memory = T
)
}
\arguments{
\item{url}{SSRS url.}

\item{...}{SSRS reports' built-in filters. See \code{Details}.}

\item{username}{User ID (without email domain). See \code{Details}.}

\item{format}{Some SSRS reports offer multiple formats to download. Currently only
csv is supported and is the default value. May be extended in the future.}

\item{.explore}{If you are unsure what filters you could use for your SSRS report,
set this to \code{TRUE} and a list of currently supported filters and their
default values will be printed in the console.}

\item{.skip}{SSRS reports in csv format may contain lines above the headers
(meta info, descriptions, etc). You may not wish to have this in your
data frame. If in your first run you noted there are lines above the
headers, you can enter number of lines to skip here.}

\item{.in_memory}{If the body of the response is too large for your environment, you will
run into \code{curl::curl_fetch_memory()} error. In this case, set this
parameter to \code{FALSE}, and a \code{tempfile} will be created for you to
temporarily store the response body while being parsed into a csv.
Alternatively, provide a full path with file name to explicitly direct
the \code{tempfile} to.}
}
\value{
A \code{tibble} object.
}
\description{
SQL Server Reporting Services (SSRS) built by PHSA enables an alternative
way for users to retrieve public health data containing identifiers.
}
\details{
This function provides an interface to pull data into R environment by
leveraging the following packages/tools:
\itemize{
\item \code{keyring}: handles user credential elegantly.
\item \code{httr2}: handles HTTP requests and responses following Microsoft
documentation on REST APIs for Reporting Services
(\url{https://learn.microsoft.com/en-us/sql/reporting-services/developer/rest-api?view=sql-server-ver16}).
}

There are some helper parameters to assist users with the report's built-in
filters and output formats. However, how the report is set up may be very
different from one to another. Please always double check to ensure what
you get is what you intended.

The helper to determine filters is \code{.explore}. If you set it to \code{TRUE},
you may get something similar to the following message printed in your
console:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  Default User Input:

    health_authority: No input detected; possibly checkbox?
    death_date_from : 1/1/2015
    death_date_to   : 5/20/2025

}\if{html}{\out{</div>}}

To use filters in this function, simply refer to what's printed above, and
add them as part of the function:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{read_ssrs(
  url             = YOUR_SSRS_URL,
  death_date_from = '1/1/2015',
  death_date_to   = '5/20/2025'
)
}\if{html}{\out{</div>}}

Your user credential is managed by \code{keyring} package. This prevents you
from entering your credentials in the console or saving it in the script,
which are both not ideal practices for security.

\code{keyring} will leverage your operating system's credential manager to
handle your saved credential.
}
